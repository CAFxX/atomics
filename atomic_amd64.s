// Code generated by command: go run gen.go -out atomic_amd64.s -stubs atomic_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func AddInt8(addr *int8, a0 int8)
TEXT ·AddInt8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	ADDB CL, (AX)
	RET

// func AddUint8(addr *uint8, a0 uint8)
TEXT ·AddUint8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	ADDB CL, (AX)
	RET

// func AddInt16(addr *int16, a0 int16)
TEXT ·AddInt16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	ADDW CX, (AX)
	RET

// func AddUint16(addr *uint16, a0 uint16)
TEXT ·AddUint16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	ADDW CX, (AX)
	RET

// func AddInt32(addr *int32, a0 int32)
TEXT ·AddInt32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	ADDL CX, (AX)
	RET

// func AddUint32(addr *uint32, a0 uint32)
TEXT ·AddUint32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	ADDL CX, (AX)
	RET

// func AddInt64(addr *int64, a0 int64)
TEXT ·AddInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADDQ CX, (AX)
	RET

// func AddUint64(addr *uint64, a0 uint64)
TEXT ·AddUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADDQ CX, (AX)
	RET

// func AddInt(addr *int, a0 int)
TEXT ·AddInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADDQ CX, (AX)
	RET

// func AddUint(addr *uint, a0 uint)
TEXT ·AddUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADDQ CX, (AX)
	RET

// func AddUintptr(addr *uintptr, a0 uintptr)
TEXT ·AddUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADDQ CX, (AX)
	RET

// func AddWithCarryInt8(addr *int8, a0 int8)
TEXT ·AddWithCarryInt8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	ADCB CL, (AX)
	RET

// func AddWithCarryUint8(addr *uint8, a0 uint8)
TEXT ·AddWithCarryUint8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	ADCB CL, (AX)
	RET

// func AddWithCarryInt16(addr *int16, a0 int16)
TEXT ·AddWithCarryInt16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	ADCW CX, (AX)
	RET

// func AddWithCarryUint16(addr *uint16, a0 uint16)
TEXT ·AddWithCarryUint16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	ADCW CX, (AX)
	RET

// func AddWithCarryInt32(addr *int32, a0 int32)
TEXT ·AddWithCarryInt32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	ADCL CX, (AX)
	RET

// func AddWithCarryUint32(addr *uint32, a0 uint32)
TEXT ·AddWithCarryUint32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	ADCL CX, (AX)
	RET

// func AddWithCarryInt64(addr *int64, a0 int64)
TEXT ·AddWithCarryInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADCQ CX, (AX)
	RET

// func AddWithCarryUint64(addr *uint64, a0 uint64)
TEXT ·AddWithCarryUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADCQ CX, (AX)
	RET

// func AddWithCarryInt(addr *int, a0 int)
TEXT ·AddWithCarryInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADCQ CX, (AX)
	RET

// func AddWithCarryUint(addr *uint, a0 uint)
TEXT ·AddWithCarryUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADCQ CX, (AX)
	RET

// func AddWithCarryUintptr(addr *uintptr, a0 uintptr)
TEXT ·AddWithCarryUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ADCQ CX, (AX)
	RET

// func AndInt8(addr *int8, a0 int8)
TEXT ·AndInt8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	ANDB CL, (AX)
	RET

// func AndUint8(addr *uint8, a0 uint8)
TEXT ·AndUint8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	ANDB CL, (AX)
	RET

// func AndInt16(addr *int16, a0 int16)
TEXT ·AndInt16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	ANDW CX, (AX)
	RET

// func AndUint16(addr *uint16, a0 uint16)
TEXT ·AndUint16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	ANDW CX, (AX)
	RET

// func AndInt32(addr *int32, a0 int32)
TEXT ·AndInt32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	ANDL CX, (AX)
	RET

// func AndUint32(addr *uint32, a0 uint32)
TEXT ·AndUint32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	ANDL CX, (AX)
	RET

// func AndInt64(addr *int64, a0 int64)
TEXT ·AndInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ANDQ CX, (AX)
	RET

// func AndUint64(addr *uint64, a0 uint64)
TEXT ·AndUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ANDQ CX, (AX)
	RET

// func AndInt(addr *int, a0 int)
TEXT ·AndInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ANDQ CX, (AX)
	RET

// func AndUint(addr *uint, a0 uint)
TEXT ·AndUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ANDQ CX, (AX)
	RET

// func AndUintptr(addr *uintptr, a0 uintptr)
TEXT ·AndUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ANDQ CX, (AX)
	RET

// func BitTestAndComplementInt16(addr *int16, a0 int16) int16
TEXT ·BitTestAndComplementInt16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	BTCW  CX, (AX)
	SETCS DL
	MOVW  DX, ret+16(FP)
	RET

// func BitTestAndComplementUint16(addr *uint16, a0 uint16) uint16
TEXT ·BitTestAndComplementUint16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	BTCW  CX, (AX)
	SETCS DL
	MOVW  DX, ret+16(FP)
	RET

// func BitTestAndComplementInt32(addr *int32, a0 int32) int32
TEXT ·BitTestAndComplementInt32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	BTCL  CX, (AX)
	SETCS DL
	MOVL  DX, ret+16(FP)
	RET

// func BitTestAndComplementUint32(addr *uint32, a0 uint32) uint32
TEXT ·BitTestAndComplementUint32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	BTCL  CX, (AX)
	SETCS DL
	MOVL  DX, ret+16(FP)
	RET

// func BitTestAndComplementInt64(addr *int64, a0 int64) int64
TEXT ·BitTestAndComplementInt64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTCQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndComplementUint64(addr *uint64, a0 uint64) uint64
TEXT ·BitTestAndComplementUint64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTCQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndComplementInt(addr *int, a0 int) int
TEXT ·BitTestAndComplementInt(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTCQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndComplementUint(addr *uint, a0 uint) uint
TEXT ·BitTestAndComplementUint(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTCQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndComplementUintptr(addr *uintptr, a0 uintptr) uintptr
TEXT ·BitTestAndComplementUintptr(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTCQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndResetInt16(addr *int16, a0 int16) int16
TEXT ·BitTestAndResetInt16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	BTRW  CX, (AX)
	SETCS DL
	MOVW  DX, ret+16(FP)
	RET

// func BitTestAndResetUint16(addr *uint16, a0 uint16) uint16
TEXT ·BitTestAndResetUint16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	BTRW  CX, (AX)
	SETCS DL
	MOVW  DX, ret+16(FP)
	RET

// func BitTestAndResetInt32(addr *int32, a0 int32) int32
TEXT ·BitTestAndResetInt32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	BTRL  CX, (AX)
	SETCS DL
	MOVL  DX, ret+16(FP)
	RET

// func BitTestAndResetUint32(addr *uint32, a0 uint32) uint32
TEXT ·BitTestAndResetUint32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	BTRL  CX, (AX)
	SETCS DL
	MOVL  DX, ret+16(FP)
	RET

// func BitTestAndResetInt64(addr *int64, a0 int64) int64
TEXT ·BitTestAndResetInt64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTRQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndResetUint64(addr *uint64, a0 uint64) uint64
TEXT ·BitTestAndResetUint64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTRQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndResetInt(addr *int, a0 int) int
TEXT ·BitTestAndResetInt(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTRQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndResetUint(addr *uint, a0 uint) uint
TEXT ·BitTestAndResetUint(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTRQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndResetUintptr(addr *uintptr, a0 uintptr) uintptr
TEXT ·BitTestAndResetUintptr(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTRQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndSetInt16(addr *int16, a0 int16) int16
TEXT ·BitTestAndSetInt16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	BTSW  CX, (AX)
	SETCS DL
	MOVW  DX, ret+16(FP)
	RET

// func BitTestAndSetUint16(addr *uint16, a0 uint16) uint16
TEXT ·BitTestAndSetUint16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	BTSW  CX, (AX)
	SETCS DL
	MOVW  DX, ret+16(FP)
	RET

// func BitTestAndSetInt32(addr *int32, a0 int32) int32
TEXT ·BitTestAndSetInt32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	BTSL  CX, (AX)
	SETCS DL
	MOVL  DX, ret+16(FP)
	RET

// func BitTestAndSetUint32(addr *uint32, a0 uint32) uint32
TEXT ·BitTestAndSetUint32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	BTSL  CX, (AX)
	SETCS DL
	MOVL  DX, ret+16(FP)
	RET

// func BitTestAndSetInt64(addr *int64, a0 int64) int64
TEXT ·BitTestAndSetInt64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTSQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndSetUint64(addr *uint64, a0 uint64) uint64
TEXT ·BitTestAndSetUint64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTSQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndSetInt(addr *int, a0 int) int
TEXT ·BitTestAndSetInt(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTSQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndSetUint(addr *uint, a0 uint) uint
TEXT ·BitTestAndSetUint(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTSQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func BitTestAndSetUintptr(addr *uintptr, a0 uintptr) uintptr
TEXT ·BitTestAndSetUintptr(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	BTSQ  CX, (AX)
	SETCS DL
	MOVQ  DX, ret+16(FP)
	RET

// func CompareAndSwapInt8(addr *int8, a0 int8, a1 int8) int8
TEXT ·CompareAndSwapInt8(SB), NOSPLIT, $0-17
	MOVQ addr+0(FP), CX
	MOVB a0+8(FP), AL
	MOVB a1+9(FP), DL

	LOCK
	CMPXCHGB DL, (CX)
	MOVB     AL, ret+16(FP)
	RET

// func CompareAndSwapUint8(addr *uint8, a0 uint8, a1 uint8) uint8
TEXT ·CompareAndSwapUint8(SB), NOSPLIT, $0-17
	MOVQ addr+0(FP), CX
	MOVB a0+8(FP), AL
	MOVB a1+9(FP), DL

	LOCK
	CMPXCHGB DL, (CX)
	MOVB     AL, ret+16(FP)
	RET

// func CompareAndSwapInt16(addr *int16, a0 int16, a1 int16) int16
TEXT ·CompareAndSwapInt16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), CX
	MOVW a0+8(FP), AX
	MOVW a1+10(FP), DX

	LOCK
	CMPXCHGW DX, (CX)
	MOVW     AX, ret+16(FP)
	RET

// func CompareAndSwapUint16(addr *uint16, a0 uint16, a1 uint16) uint16
TEXT ·CompareAndSwapUint16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), CX
	MOVW a0+8(FP), AX
	MOVW a1+10(FP), DX

	LOCK
	CMPXCHGW DX, (CX)
	MOVW     AX, ret+16(FP)
	RET

// func CompareAndSwapInt32(addr *int32, a0 int32, a1 int32) int32
TEXT ·CompareAndSwapInt32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), CX
	MOVL a0+8(FP), AX
	MOVL a1+12(FP), DX

	LOCK
	CMPXCHGL DX, (CX)
	MOVL     AX, ret+16(FP)
	RET

// func CompareAndSwapUint32(addr *uint32, a0 uint32, a1 uint32) uint32
TEXT ·CompareAndSwapUint32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), CX
	MOVL a0+8(FP), AX
	MOVL a1+12(FP), DX

	LOCK
	CMPXCHGL DX, (CX)
	MOVL     AX, ret+16(FP)
	RET

// func CompareAndSwapInt64(addr *int64, a0 int64, a1 int64) int64
TEXT ·CompareAndSwapInt64(SB), NOSPLIT, $0-32
	MOVQ addr+0(FP), CX
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX

	LOCK
	CMPXCHGQ DX, (CX)
	MOVQ     AX, ret+24(FP)
	RET

// func CompareAndSwapUint64(addr *uint64, a0 uint64, a1 uint64) uint64
TEXT ·CompareAndSwapUint64(SB), NOSPLIT, $0-32
	MOVQ addr+0(FP), CX
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX

	LOCK
	CMPXCHGQ DX, (CX)
	MOVQ     AX, ret+24(FP)
	RET

// func CompareAndSwapInt(addr *int, a0 int, a1 int) int
TEXT ·CompareAndSwapInt(SB), NOSPLIT, $0-32
	MOVQ addr+0(FP), CX
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX

	LOCK
	CMPXCHGQ DX, (CX)
	MOVQ     AX, ret+24(FP)
	RET

// func CompareAndSwapUint(addr *uint, a0 uint, a1 uint) uint
TEXT ·CompareAndSwapUint(SB), NOSPLIT, $0-32
	MOVQ addr+0(FP), CX
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX

	LOCK
	CMPXCHGQ DX, (CX)
	MOVQ     AX, ret+24(FP)
	RET

// func CompareAndSwapUintptr(addr *uintptr, a0 uintptr, a1 uintptr) uintptr
TEXT ·CompareAndSwapUintptr(SB), NOSPLIT, $0-32
	MOVQ addr+0(FP), CX
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX

	LOCK
	CMPXCHGQ DX, (CX)
	MOVQ     AX, ret+24(FP)
	RET

// func CompareAndSwap2xInt64(addr *int64, a0 int64, a1 int64, a2 int64, a3 int64) (int64, int64)
TEXT ·CompareAndSwap2xInt64(SB), NOSPLIT, $0-56
	MOVQ addr+0(FP), BP
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX
	MOVQ a2+24(FP), BX
	MOVQ a3+32(FP), CX
	MOVQ DX, DX
	MOVQ CX, CX

	LOCK
	CMPXCHG16B (BP)
	MOVQ       AX, ret+40(FP)
	MOVQ       DX, ret1+48(FP)
	RET

// func CompareAndSwap2xUint64(addr *uint64, a0 uint64, a1 uint64, a2 uint64, a3 uint64) (uint64, uint64)
TEXT ·CompareAndSwap2xUint64(SB), NOSPLIT, $0-56
	MOVQ addr+0(FP), BP
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX
	MOVQ a2+24(FP), BX
	MOVQ a3+32(FP), CX
	MOVQ DX, DX
	MOVQ CX, CX

	LOCK
	CMPXCHG16B (BP)
	MOVQ       AX, ret+40(FP)
	MOVQ       DX, ret1+48(FP)
	RET

// func CompareAndSwap2xInt(addr *int, a0 int, a1 int, a2 int, a3 int) (int, int)
TEXT ·CompareAndSwap2xInt(SB), NOSPLIT, $0-56
	MOVQ addr+0(FP), BP
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX
	MOVQ a2+24(FP), BX
	MOVQ a3+32(FP), CX
	MOVQ DX, DX
	MOVQ CX, CX

	LOCK
	CMPXCHG16B (BP)
	MOVQ       AX, ret+40(FP)
	MOVQ       DX, ret1+48(FP)
	RET

// func CompareAndSwap2xUint(addr *uint, a0 uint, a1 uint, a2 uint, a3 uint) (uint, uint)
TEXT ·CompareAndSwap2xUint(SB), NOSPLIT, $0-56
	MOVQ addr+0(FP), BP
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX
	MOVQ a2+24(FP), BX
	MOVQ a3+32(FP), CX
	MOVQ DX, DX
	MOVQ CX, CX

	LOCK
	CMPXCHG16B (BP)
	MOVQ       AX, ret+40(FP)
	MOVQ       DX, ret1+48(FP)
	RET

// func CompareAndSwap2xUintptr(addr *uintptr, a0 uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (uintptr, uintptr)
TEXT ·CompareAndSwap2xUintptr(SB), NOSPLIT, $0-56
	MOVQ addr+0(FP), BP
	MOVQ a0+8(FP), AX
	MOVQ a1+16(FP), DX
	MOVQ a2+24(FP), BX
	MOVQ a3+32(FP), CX
	MOVQ DX, DX
	MOVQ CX, CX

	LOCK
	CMPXCHG16B (BP)
	MOVQ       AX, ret+40(FP)
	MOVQ       DX, ret1+48(FP)
	RET

// func DecrementInt8(addr *int8)
TEXT ·DecrementInt8(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECB (AX)
	RET

// func DecrementUint8(addr *uint8)
TEXT ·DecrementUint8(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECB (AX)
	RET

// func DecrementInt16(addr *int16)
TEXT ·DecrementInt16(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECW (AX)
	RET

// func DecrementUint16(addr *uint16)
TEXT ·DecrementUint16(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECW (AX)
	RET

// func DecrementInt32(addr *int32)
TEXT ·DecrementInt32(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECL (AX)
	RET

// func DecrementUint32(addr *uint32)
TEXT ·DecrementUint32(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECL (AX)
	RET

// func DecrementInt64(addr *int64)
TEXT ·DecrementInt64(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECQ (AX)
	RET

// func DecrementUint64(addr *uint64)
TEXT ·DecrementUint64(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECQ (AX)
	RET

// func DecrementInt(addr *int)
TEXT ·DecrementInt(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECQ (AX)
	RET

// func DecrementUint(addr *uint)
TEXT ·DecrementUint(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECQ (AX)
	RET

// func DecrementUintptr(addr *uintptr)
TEXT ·DecrementUintptr(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	DECQ (AX)
	RET

// func DecrementAndCheckZeroInt8(addr *int8) int8
TEXT ·DecrementAndCheckZeroInt8(SB), NOSPLIT, $0-9
	MOVQ addr+0(FP), AX

	LOCK
	DECB  (AX)
	SETEQ AL
	MOVB  AL, ret+8(FP)
	RET

// func DecrementAndCheckZeroUint8(addr *uint8) uint8
TEXT ·DecrementAndCheckZeroUint8(SB), NOSPLIT, $0-9
	MOVQ addr+0(FP), AX

	LOCK
	DECB  (AX)
	SETEQ AL
	MOVB  AL, ret+8(FP)
	RET

// func DecrementAndCheckZeroInt16(addr *int16) int16
TEXT ·DecrementAndCheckZeroInt16(SB), NOSPLIT, $0-10
	MOVQ addr+0(FP), AX

	LOCK
	DECW  (AX)
	SETEQ CL
	MOVW  CX, ret+8(FP)
	RET

// func DecrementAndCheckZeroUint16(addr *uint16) uint16
TEXT ·DecrementAndCheckZeroUint16(SB), NOSPLIT, $0-10
	MOVQ addr+0(FP), AX

	LOCK
	DECW  (AX)
	SETEQ CL
	MOVW  CX, ret+8(FP)
	RET

// func DecrementAndCheckZeroInt32(addr *int32) int32
TEXT ·DecrementAndCheckZeroInt32(SB), NOSPLIT, $0-12
	MOVQ addr+0(FP), AX

	LOCK
	DECL  (AX)
	SETEQ CL
	MOVL  CX, ret+8(FP)
	RET

// func DecrementAndCheckZeroUint32(addr *uint32) uint32
TEXT ·DecrementAndCheckZeroUint32(SB), NOSPLIT, $0-12
	MOVQ addr+0(FP), AX

	LOCK
	DECL  (AX)
	SETEQ CL
	MOVL  CX, ret+8(FP)
	RET

// func DecrementAndCheckZeroInt64(addr *int64) int64
TEXT ·DecrementAndCheckZeroInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	DECQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func DecrementAndCheckZeroUint64(addr *uint64) uint64
TEXT ·DecrementAndCheckZeroUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	DECQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func DecrementAndCheckZeroInt(addr *int) int
TEXT ·DecrementAndCheckZeroInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	DECQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func DecrementAndCheckZeroUint(addr *uint) uint
TEXT ·DecrementAndCheckZeroUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	DECQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func DecrementAndCheckZeroUintptr(addr *uintptr) uintptr
TEXT ·DecrementAndCheckZeroUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	DECQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func IncrementInt8(addr *int8)
TEXT ·IncrementInt8(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCB (AX)
	RET

// func IncrementUint8(addr *uint8)
TEXT ·IncrementUint8(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCB (AX)
	RET

// func IncrementInt16(addr *int16)
TEXT ·IncrementInt16(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCW (AX)
	RET

// func IncrementUint16(addr *uint16)
TEXT ·IncrementUint16(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCW (AX)
	RET

// func IncrementInt32(addr *int32)
TEXT ·IncrementInt32(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCL (AX)
	RET

// func IncrementUint32(addr *uint32)
TEXT ·IncrementUint32(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCL (AX)
	RET

// func IncrementInt64(addr *int64)
TEXT ·IncrementInt64(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCQ (AX)
	RET

// func IncrementUint64(addr *uint64)
TEXT ·IncrementUint64(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCQ (AX)
	RET

// func IncrementInt(addr *int)
TEXT ·IncrementInt(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCQ (AX)
	RET

// func IncrementUint(addr *uint)
TEXT ·IncrementUint(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCQ (AX)
	RET

// func IncrementUintptr(addr *uintptr)
TEXT ·IncrementUintptr(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	INCQ (AX)
	RET

// func IncrementAndCheckZeroInt8(addr *int8) int8
TEXT ·IncrementAndCheckZeroInt8(SB), NOSPLIT, $0-9
	MOVQ addr+0(FP), AX

	LOCK
	INCB  (AX)
	SETEQ AL
	MOVB  AL, ret+8(FP)
	RET

// func IncrementAndCheckZeroUint8(addr *uint8) uint8
TEXT ·IncrementAndCheckZeroUint8(SB), NOSPLIT, $0-9
	MOVQ addr+0(FP), AX

	LOCK
	INCB  (AX)
	SETEQ AL
	MOVB  AL, ret+8(FP)
	RET

// func IncrementAndCheckZeroInt16(addr *int16) int16
TEXT ·IncrementAndCheckZeroInt16(SB), NOSPLIT, $0-10
	MOVQ addr+0(FP), AX

	LOCK
	INCW  (AX)
	SETEQ CL
	MOVW  CX, ret+8(FP)
	RET

// func IncrementAndCheckZeroUint16(addr *uint16) uint16
TEXT ·IncrementAndCheckZeroUint16(SB), NOSPLIT, $0-10
	MOVQ addr+0(FP), AX

	LOCK
	INCW  (AX)
	SETEQ CL
	MOVW  CX, ret+8(FP)
	RET

// func IncrementAndCheckZeroInt32(addr *int32) int32
TEXT ·IncrementAndCheckZeroInt32(SB), NOSPLIT, $0-12
	MOVQ addr+0(FP), AX

	LOCK
	INCL  (AX)
	SETEQ CL
	MOVL  CX, ret+8(FP)
	RET

// func IncrementAndCheckZeroUint32(addr *uint32) uint32
TEXT ·IncrementAndCheckZeroUint32(SB), NOSPLIT, $0-12
	MOVQ addr+0(FP), AX

	LOCK
	INCL  (AX)
	SETEQ CL
	MOVL  CX, ret+8(FP)
	RET

// func IncrementAndCheckZeroInt64(addr *int64) int64
TEXT ·IncrementAndCheckZeroInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	INCQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func IncrementAndCheckZeroUint64(addr *uint64) uint64
TEXT ·IncrementAndCheckZeroUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	INCQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func IncrementAndCheckZeroInt(addr *int) int
TEXT ·IncrementAndCheckZeroInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	INCQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func IncrementAndCheckZeroUint(addr *uint) uint
TEXT ·IncrementAndCheckZeroUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	INCQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func IncrementAndCheckZeroUintptr(addr *uintptr) uintptr
TEXT ·IncrementAndCheckZeroUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX

	LOCK
	INCQ  (AX)
	SETEQ CL
	MOVQ  CX, ret+8(FP)
	RET

// func NegateInt8(addr *int8)
TEXT ·NegateInt8(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGB (AX)
	RET

// func NegateUint8(addr *uint8)
TEXT ·NegateUint8(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGB (AX)
	RET

// func NegateInt16(addr *int16)
TEXT ·NegateInt16(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGW (AX)
	RET

// func NegateUint16(addr *uint16)
TEXT ·NegateUint16(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGW (AX)
	RET

// func NegateInt32(addr *int32)
TEXT ·NegateInt32(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGL (AX)
	RET

// func NegateUint32(addr *uint32)
TEXT ·NegateUint32(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGL (AX)
	RET

// func NegateInt64(addr *int64)
TEXT ·NegateInt64(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGQ (AX)
	RET

// func NegateUint64(addr *uint64)
TEXT ·NegateUint64(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGQ (AX)
	RET

// func NegateInt(addr *int)
TEXT ·NegateInt(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGQ (AX)
	RET

// func NegateUint(addr *uint)
TEXT ·NegateUint(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGQ (AX)
	RET

// func NegateUintptr(addr *uintptr)
TEXT ·NegateUintptr(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NEGQ (AX)
	RET

// func NotInt8(addr *int8)
TEXT ·NotInt8(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTB (AX)
	RET

// func NotUint8(addr *uint8)
TEXT ·NotUint8(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTB (AX)
	RET

// func NotInt16(addr *int16)
TEXT ·NotInt16(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTW (AX)
	RET

// func NotUint16(addr *uint16)
TEXT ·NotUint16(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTW (AX)
	RET

// func NotInt32(addr *int32)
TEXT ·NotInt32(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTL (AX)
	RET

// func NotUint32(addr *uint32)
TEXT ·NotUint32(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTL (AX)
	RET

// func NotInt64(addr *int64)
TEXT ·NotInt64(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTQ (AX)
	RET

// func NotUint64(addr *uint64)
TEXT ·NotUint64(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTQ (AX)
	RET

// func NotInt(addr *int)
TEXT ·NotInt(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTQ (AX)
	RET

// func NotUint(addr *uint)
TEXT ·NotUint(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTQ (AX)
	RET

// func NotUintptr(addr *uintptr)
TEXT ·NotUintptr(SB), NOSPLIT, $0-8
	MOVQ addr+0(FP), AX

	LOCK
	NOTQ (AX)
	RET

// func OrInt8(addr *int8, a0 int8)
TEXT ·OrInt8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	ORB CL, (AX)
	RET

// func OrUint8(addr *uint8, a0 uint8)
TEXT ·OrUint8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	ORB CL, (AX)
	RET

// func OrInt16(addr *int16, a0 int16)
TEXT ·OrInt16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	ORW CX, (AX)
	RET

// func OrUint16(addr *uint16, a0 uint16)
TEXT ·OrUint16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	ORW CX, (AX)
	RET

// func OrInt32(addr *int32, a0 int32)
TEXT ·OrInt32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	ORL CX, (AX)
	RET

// func OrUint32(addr *uint32, a0 uint32)
TEXT ·OrUint32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	ORL CX, (AX)
	RET

// func OrInt64(addr *int64, a0 int64)
TEXT ·OrInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ORQ CX, (AX)
	RET

// func OrUint64(addr *uint64, a0 uint64)
TEXT ·OrUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ORQ CX, (AX)
	RET

// func OrInt(addr *int, a0 int)
TEXT ·OrInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ORQ CX, (AX)
	RET

// func OrUint(addr *uint, a0 uint)
TEXT ·OrUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ORQ CX, (AX)
	RET

// func OrUintptr(addr *uintptr, a0 uintptr)
TEXT ·OrUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	ORQ CX, (AX)
	RET

// func SubtractWithBorrowInt8(addr *int8, a0 int8)
TEXT ·SubtractWithBorrowInt8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	SBBB CL, (AX)
	RET

// func SubtractWithBorrowUint8(addr *uint8, a0 uint8)
TEXT ·SubtractWithBorrowUint8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	SBBB CL, (AX)
	RET

// func SubtractWithBorrowInt16(addr *int16, a0 int16)
TEXT ·SubtractWithBorrowInt16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	SBBW CX, (AX)
	RET

// func SubtractWithBorrowUint16(addr *uint16, a0 uint16)
TEXT ·SubtractWithBorrowUint16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	SBBW CX, (AX)
	RET

// func SubtractWithBorrowInt32(addr *int32, a0 int32)
TEXT ·SubtractWithBorrowInt32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	SBBL CX, (AX)
	RET

// func SubtractWithBorrowUint32(addr *uint32, a0 uint32)
TEXT ·SubtractWithBorrowUint32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	SBBL CX, (AX)
	RET

// func SubtractWithBorrowInt64(addr *int64, a0 int64)
TEXT ·SubtractWithBorrowInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SBBQ CX, (AX)
	RET

// func SubtractWithBorrowUint64(addr *uint64, a0 uint64)
TEXT ·SubtractWithBorrowUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SBBQ CX, (AX)
	RET

// func SubtractWithBorrowInt(addr *int, a0 int)
TEXT ·SubtractWithBorrowInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SBBQ CX, (AX)
	RET

// func SubtractWithBorrowUint(addr *uint, a0 uint)
TEXT ·SubtractWithBorrowUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SBBQ CX, (AX)
	RET

// func SubtractWithBorrowUintptr(addr *uintptr, a0 uintptr)
TEXT ·SubtractWithBorrowUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SBBQ CX, (AX)
	RET

// func SubtractInt8(addr *int8, a0 int8)
TEXT ·SubtractInt8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	SUBB CL, (AX)
	RET

// func SubtractUint8(addr *uint8, a0 uint8)
TEXT ·SubtractUint8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	SUBB CL, (AX)
	RET

// func SubtractInt16(addr *int16, a0 int16)
TEXT ·SubtractInt16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	SUBW CX, (AX)
	RET

// func SubtractUint16(addr *uint16, a0 uint16)
TEXT ·SubtractUint16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	SUBW CX, (AX)
	RET

// func SubtractInt32(addr *int32, a0 int32)
TEXT ·SubtractInt32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	SUBL CX, (AX)
	RET

// func SubtractUint32(addr *uint32, a0 uint32)
TEXT ·SubtractUint32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	SUBL CX, (AX)
	RET

// func SubtractInt64(addr *int64, a0 int64)
TEXT ·SubtractInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SUBQ CX, (AX)
	RET

// func SubtractUint64(addr *uint64, a0 uint64)
TEXT ·SubtractUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SUBQ CX, (AX)
	RET

// func SubtractInt(addr *int, a0 int)
TEXT ·SubtractInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SUBQ CX, (AX)
	RET

// func SubtractUint(addr *uint, a0 uint)
TEXT ·SubtractUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SUBQ CX, (AX)
	RET

// func SubtractUintptr(addr *uintptr, a0 uintptr)
TEXT ·SubtractUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	SUBQ CX, (AX)
	RET

// func XorInt8(addr *int8, a0 int8)
TEXT ·XorInt8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	XORB CL, (AX)
	RET

// func XorUint8(addr *uint8, a0 uint8)
TEXT ·XorUint8(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	XORB CL, (AX)
	RET

// func XorInt16(addr *int16, a0 int16)
TEXT ·XorInt16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	XORW CX, (AX)
	RET

// func XorUint16(addr *uint16, a0 uint16)
TEXT ·XorUint16(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	XORW CX, (AX)
	RET

// func XorInt32(addr *int32, a0 int32)
TEXT ·XorInt32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	XORL CX, (AX)
	RET

// func XorUint32(addr *uint32, a0 uint32)
TEXT ·XorUint32(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	XORL CX, (AX)
	RET

// func XorInt64(addr *int64, a0 int64)
TEXT ·XorInt64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ CX, (AX)
	RET

// func XorUint64(addr *uint64, a0 uint64)
TEXT ·XorUint64(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ CX, (AX)
	RET

// func XorInt(addr *int, a0 int)
TEXT ·XorInt(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ CX, (AX)
	RET

// func XorUint(addr *uint, a0 uint)
TEXT ·XorUint(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ CX, (AX)
	RET

// func XorUintptr(addr *uintptr, a0 uintptr)
TEXT ·XorUintptr(SB), NOSPLIT, $0-16
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ CX, (AX)
	RET

// func XorAndCheckZeroInt8(addr *int8, a0 int8) int8
TEXT ·XorAndCheckZeroInt8(SB), NOSPLIT, $0-17
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	XORB  CL, (AX)
	SETEQ AL
	MOVB  AL, ret+16(FP)
	RET

// func XorAndCheckZeroUint8(addr *uint8, a0 uint8) uint8
TEXT ·XorAndCheckZeroUint8(SB), NOSPLIT, $0-17
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	XORB  CL, (AX)
	SETEQ AL
	MOVB  AL, ret+16(FP)
	RET

// func XorAndCheckZeroInt16(addr *int16, a0 int16) int16
TEXT ·XorAndCheckZeroInt16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	XORW  CX, (AX)
	SETEQ DL
	MOVW  DX, ret+16(FP)
	RET

// func XorAndCheckZeroUint16(addr *uint16, a0 uint16) uint16
TEXT ·XorAndCheckZeroUint16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	XORW  CX, (AX)
	SETEQ DL
	MOVW  DX, ret+16(FP)
	RET

// func XorAndCheckZeroInt32(addr *int32, a0 int32) int32
TEXT ·XorAndCheckZeroInt32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	XORL  CX, (AX)
	SETEQ DL
	MOVL  DX, ret+16(FP)
	RET

// func XorAndCheckZeroUint32(addr *uint32, a0 uint32) uint32
TEXT ·XorAndCheckZeroUint32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	XORL  CX, (AX)
	SETEQ DL
	MOVL  DX, ret+16(FP)
	RET

// func XorAndCheckZeroInt64(addr *int64, a0 int64) int64
TEXT ·XorAndCheckZeroInt64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ  CX, (AX)
	SETEQ DL
	MOVQ  DX, ret+16(FP)
	RET

// func XorAndCheckZeroUint64(addr *uint64, a0 uint64) uint64
TEXT ·XorAndCheckZeroUint64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ  CX, (AX)
	SETEQ DL
	MOVQ  DX, ret+16(FP)
	RET

// func XorAndCheckZeroInt(addr *int, a0 int) int
TEXT ·XorAndCheckZeroInt(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ  CX, (AX)
	SETEQ DL
	MOVQ  DX, ret+16(FP)
	RET

// func XorAndCheckZeroUint(addr *uint, a0 uint) uint
TEXT ·XorAndCheckZeroUint(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ  CX, (AX)
	SETEQ DL
	MOVQ  DX, ret+16(FP)
	RET

// func XorAndCheckZeroUintptr(addr *uintptr, a0 uintptr) uintptr
TEXT ·XorAndCheckZeroUintptr(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XORQ  CX, (AX)
	SETEQ DL
	MOVQ  DX, ret+16(FP)
	RET

// func AddAndSwapInt8(addr *int8, a0 int8) int8
TEXT ·AddAndSwapInt8(SB), NOSPLIT, $0-17
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	XADDB CL, (AX)
	MOVB  CL, ret+16(FP)
	RET

// func AddAndSwapUint8(addr *uint8, a0 uint8) uint8
TEXT ·AddAndSwapUint8(SB), NOSPLIT, $0-17
	MOVQ addr+0(FP), AX
	MOVB a0+8(FP), CL

	LOCK
	XADDB CL, (AX)
	MOVB  CL, ret+16(FP)
	RET

// func AddAndSwapInt16(addr *int16, a0 int16) int16
TEXT ·AddAndSwapInt16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	XADDW CX, (AX)
	MOVW  CX, ret+16(FP)
	RET

// func AddAndSwapUint16(addr *uint16, a0 uint16) uint16
TEXT ·AddAndSwapUint16(SB), NOSPLIT, $0-18
	MOVQ addr+0(FP), AX
	MOVW a0+8(FP), CX

	LOCK
	XADDW CX, (AX)
	MOVW  CX, ret+16(FP)
	RET

// func AddAndSwapInt32(addr *int32, a0 int32) int32
TEXT ·AddAndSwapInt32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	XADDL CX, (AX)
	MOVL  CX, ret+16(FP)
	RET

// func AddAndSwapUint32(addr *uint32, a0 uint32) uint32
TEXT ·AddAndSwapUint32(SB), NOSPLIT, $0-20
	MOVQ addr+0(FP), AX
	MOVL a0+8(FP), CX

	LOCK
	XADDL CX, (AX)
	MOVL  CX, ret+16(FP)
	RET

// func AddAndSwapInt64(addr *int64, a0 int64) int64
TEXT ·AddAndSwapInt64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XADDQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func AddAndSwapUint64(addr *uint64, a0 uint64) uint64
TEXT ·AddAndSwapUint64(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XADDQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func AddAndSwapInt(addr *int, a0 int) int
TEXT ·AddAndSwapInt(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XADDQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func AddAndSwapUint(addr *uint, a0 uint) uint
TEXT ·AddAndSwapUint(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XADDQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func AddAndSwapUintptr(addr *uintptr, a0 uintptr) uintptr
TEXT ·AddAndSwapUintptr(SB), NOSPLIT, $0-24
	MOVQ addr+0(FP), AX
	MOVQ a0+8(FP), CX

	LOCK
	XADDQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func SwapInt8(addr *int8, a0 int8) int8
TEXT ·SwapInt8(SB), NOSPLIT, $0-17
	MOVQ  addr+0(FP), AX
	MOVB  a0+8(FP), CL
	XCHGB CL, (AX)
	MOVB  CL, ret+16(FP)
	RET

// func SwapUint8(addr *uint8, a0 uint8) uint8
TEXT ·SwapUint8(SB), NOSPLIT, $0-17
	MOVQ  addr+0(FP), AX
	MOVB  a0+8(FP), CL
	XCHGB CL, (AX)
	MOVB  CL, ret+16(FP)
	RET

// func SwapInt16(addr *int16, a0 int16) int16
TEXT ·SwapInt16(SB), NOSPLIT, $0-18
	MOVQ  addr+0(FP), AX
	MOVW  a0+8(FP), CX
	XCHGW CX, (AX)
	MOVW  CX, ret+16(FP)
	RET

// func SwapUint16(addr *uint16, a0 uint16) uint16
TEXT ·SwapUint16(SB), NOSPLIT, $0-18
	MOVQ  addr+0(FP), AX
	MOVW  a0+8(FP), CX
	XCHGW CX, (AX)
	MOVW  CX, ret+16(FP)
	RET

// func SwapInt32(addr *int32, a0 int32) int32
TEXT ·SwapInt32(SB), NOSPLIT, $0-20
	MOVQ  addr+0(FP), AX
	MOVL  a0+8(FP), CX
	XCHGL CX, (AX)
	MOVL  CX, ret+16(FP)
	RET

// func SwapUint32(addr *uint32, a0 uint32) uint32
TEXT ·SwapUint32(SB), NOSPLIT, $0-20
	MOVQ  addr+0(FP), AX
	MOVL  a0+8(FP), CX
	XCHGL CX, (AX)
	MOVL  CX, ret+16(FP)
	RET

// func SwapInt64(addr *int64, a0 int64) int64
TEXT ·SwapInt64(SB), NOSPLIT, $0-24
	MOVQ  addr+0(FP), AX
	MOVQ  a0+8(FP), CX
	XCHGQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func SwapUint64(addr *uint64, a0 uint64) uint64
TEXT ·SwapUint64(SB), NOSPLIT, $0-24
	MOVQ  addr+0(FP), AX
	MOVQ  a0+8(FP), CX
	XCHGQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func SwapInt(addr *int, a0 int) int
TEXT ·SwapInt(SB), NOSPLIT, $0-24
	MOVQ  addr+0(FP), AX
	MOVQ  a0+8(FP), CX
	XCHGQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func SwapUint(addr *uint, a0 uint) uint
TEXT ·SwapUint(SB), NOSPLIT, $0-24
	MOVQ  addr+0(FP), AX
	MOVQ  a0+8(FP), CX
	XCHGQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET

// func SwapUintptr(addr *uintptr, a0 uintptr) uintptr
TEXT ·SwapUintptr(SB), NOSPLIT, $0-24
	MOVQ  addr+0(FP), AX
	MOVQ  a0+8(FP), CX
	XCHGQ CX, (AX)
	MOVQ  CX, ret+16(FP)
	RET
